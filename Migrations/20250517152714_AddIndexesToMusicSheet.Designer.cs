// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HarmonicArchiveBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517152714_AddIndexesToMusicSheet")]
    partial class AddIndexesToMusicSheet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Composer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.MusicSheetGenre", b =>
                {
                    b.Property<int>("MusicSheetId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("MusicSheetId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MusicSheetGenres");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.MusicSheetInstrument", b =>
                {
                    b.Property<int>("MusicSheetId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("integer");

                    b.HasKey("MusicSheetId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("MusicSheetInstruments");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MusicSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComposerId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MusicFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComposerId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("MusicSheets");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.MusicSheetGenre", b =>
                {
                    b.HasOne("HarmonicArchiveBackend.Models.Genre", "Genre")
                        .WithMany("MusicSheetGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSheet", "MusicSheet")
                        .WithMany("MusicSheetGenres")
                        .HasForeignKey("MusicSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("MusicSheet");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.MusicSheetInstrument", b =>
                {
                    b.HasOne("HarmonicArchiveBackend.Models.Instrument", "Instrument")
                        .WithMany("MusicSheetInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSheet", "MusicSheet")
                        .WithMany("MusicSheetInstruments")
                        .HasForeignKey("MusicSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("MusicSheet");
                });

            modelBuilder.Entity("MusicSheet", b =>
                {
                    b.HasOne("HarmonicArchiveBackend.Models.Composer", "Composer")
                        .WithMany("MusicSheets")
                        .HasForeignKey("ComposerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HarmonicArchiveBackend.Models.Title", "Title")
                        .WithMany("MusicSheets")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HarmonicArchiveBackend.Models.User", "User")
                        .WithMany("MusicSheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composer");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Composer", b =>
                {
                    b.Navigation("MusicSheets");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Genre", b =>
                {
                    b.Navigation("MusicSheetGenres");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Instrument", b =>
                {
                    b.Navigation("MusicSheetInstruments");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.Title", b =>
                {
                    b.Navigation("MusicSheets");
                });

            modelBuilder.Entity("HarmonicArchiveBackend.Models.User", b =>
                {
                    b.Navigation("MusicSheets");
                });

            modelBuilder.Entity("MusicSheet", b =>
                {
                    b.Navigation("MusicSheetGenres");

                    b.Navigation("MusicSheetInstruments");
                });
#pragma warning restore 612, 618
        }
    }
}
